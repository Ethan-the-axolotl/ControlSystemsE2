--[[ ******************************************************************************
 My custom flash tracer tracer type ( Based on wire rangers )
****************************************************************************** ]]--

local DSC = E2Helper.Descriptions
local xnm, xtp = "flash tracer", "xft"
local act = {"Returns","Adds","Removes","Updates","Samples","Dumps"}
local par = {"attachment entity", "origin position", "direction vector", "length distance"}
DSC["noFTracer()"] = act[1].." invalid "..xnm.." object"
DSC["setFTracer(e:vvn)"] = act[1].." "..xnm.." local to the entity by "..par[2]..", "..par[3]..", "..par[4]
DSC["newFTracer(vvn)"] = act[1].." "..xnm.." relative to the world by "..par[2]..", "..par[3]..", "..par[4]
DSC["setFTracer(e:vv)"] = act[1].." "..xnm.." local to the entity by "..par[2]..", "..par[3]..", "..par[4].. " from "..par[3]
DSC["newFTracer(vv)"] = act[1].." "..xnm.." relative to the world by "..par[2]..", "..par[3]..", "..par[4].. " from "..par[3]
DSC["setFTracer(e:vn)"] = act[1].." "..xnm.." relative to the entity by "..par[2]..", "..par[3].. " from up, "..par[4]
DSC["newFTracer(vn)"] = act[1].." "..xnm.." relative to the world by "..par[2]..", "..par[3].. " from up, "..par[4]
DSC["setFTracer(e:v)"] = act[1].." "..xnm.." local to the entity by "..par[2]..", zero "..par[3]..", zero "..par[4]
DSC["newFTracer(v)"] = act[1].." "..xnm.." relative to the world by "..par[2]..", zero "..par[3]..", zero "..par[4]
DSC["setFTracer(e:n)"] = act[1].." "..xnm.." relative to the entity by "..par[4]..", "..par[3]..", zero "..par[4]
DSC["newFTracer(n)"] = act[1].." "..xnm.." relative to the world by "..par[4]..", "..par[3]..", zero "..par[4]
DSC["setFTracer(e:)"] = act[1].." "..xnm.." local to the entity by zero "..par[2]..", zero "..par[3]..", zero "..par[4]
DSC["newFTracer()"] = act[1].." "..xnm.." relative to the world by zero "..par[2]..", zero "..par[3]..", zero "..par[4]
DSC["sumFTracers()"] = act[1].." the used "..xnm.." count"
DSC["maxFTracers()"] = act[1].." the upper "..xnm.." count"
DSC["remSelf("..xtp..":)"] = act[3].." the "..xnm.." from the list"
DSC["getCopy("..xtp..":)"] = act[1].." "..xnm.." copy instance of the current object"
DSC["addEntityHitSkip("..xtp..":e)"] = act[2].." the entity to the "..xnm.." internal ignore hit list"
DSC["remEntityHitSkip("..xtp..":e)"] = act[3].." the entity from the "..xnm.." internal ignore hit list"
DSC["addEntityHitOnly("..xtp..":e)"] = act[2].." the entity to the "..xnm.." internal only hit list"
DSC["remEntityHitOnly("..xtp..":e)"] = act[3].." the entity from the "..xnm.." internal only hit list"
DSC["remHit("..xtp..":)"] = act[3].." all the options from the "..xnm.." internal hit preferences"
DSC["remHit("..xtp..":s)"] = act[3].." the option from the "..xnm.." internal hit preferences"
DSC["addHitSkip("..xtp..":sn)"] = act[2].." the option to the "..xnm.." internal ignore hit list"
DSC["remHitSkip("..xtp..":sn)"] = act[3].." the option from the "..xnm.." internal ignore hit list"
DSC["addHitOnly("..xtp..":sn)"] = act[2].." the option to the "..xnm.." internal hit only list"
DSC["remHitOnly("..xtp..":sn)"] = act[3].." the option from the "..xnm.." internal only hit list"
DSC["addHitSkip("..xtp..":ss)"] = act[2].." the option to the "..xnm.." internal ignore hit list"
DSC["remHitSkip("..xtp..":ss)"] = act[3].." the option from the "..xnm.." internal ignore hit list"
DSC["addHitOnly("..xtp..":ss)"] = act[2].." the option to the "..xnm.." internal hit only list"
DSC["remHitOnly("..xtp..":ss)"] = act[3].." the option from the "..xnm.." internal only hit list"
DSC["getAttachEntity("..xtp..":)"] = act[1].." the attachment entity of the ".."..xtp.."
DSC["remAttachEntity("..xtp..":)"] = act[3].." the attachment entity of the ".."..xtp.."
DSC["setAttachEntity("..xtp..":e)"] = act[4].." the attachment entity of the ".."..xtp.."
DSC["getOrigin("..xtp..":)"] = act[1].." "..xnm.." "..par[2]
DSC["getOriginLocal("..xtp..":)"] = act[1].." "..xnm.." world "..par[2].." converted to "..par[1].." local axis"
DSC["getOriginLocal("..xtp..":e)"] = act[1].." "..xnm.." world "..par[2].." converted to entity local axis"
DSC["getOriginLocal("..xtp..":va)"] = act[1].." "..xnm.." world "..par[2].." converted to position/angle local axis"
DSC["getOriginWorld("..xtp..":)"] = act[1].." "..xnm.." local "..par[2].." converted to "..par[1].." world axis"
DSC["getOriginWorld("..xtp..":e)"] = act[1].." "..xnm.." local "..par[2].." converted to entity world axis"
DSC["getOriginWorld("..xtp..":va)"] = act[1].." "..xnm.." local "..par[2].." converted to position/angle world axis"
DSC["setOrigin("..xtp..":v)"] = act[4].." the "..xnm.." "..par[2]
DSC["getDirection("..xtp..":)"] = act[1].." "..xnm.." "..par[3]
DSC["getDirectionLocal("..xtp..":)"] = act[1].." "..xnm.." world "..par[3].." converted to "..par[1].." local axis"
DSC["getDirectionLocal("..xtp..":e)"] = act[1].." "..xnm.." world "..par[3].." converted to entity local axis"
DSC["getDirectionLocal("..xtp..":a)"] = act[1].." "..xnm.." world "..par[3].." converted to angle local axis"
DSC["getDirectionWorld("..xtp..":)"] = act[1].." "..xnm.." local "..par[3].." converted to "..par[1].." world axis"
DSC["getDirectionWorld("..xtp..":e)"] = act[1].." "..xnm.." local "..par[3].." converted to entity world axis"
DSC["getDirectionWorld("..xtp..":a)"] = act[1].." "..xnm.." local "..par[3].." converted to angle world axis"
DSC["setDirection("..xtp..":v)"] = act[4].." the "..xnm.." "..par[3]
DSC["getLength("..xtp..":)"] = act[1].." "..xnm.." "..par[4]
DSC["setLength("..xtp..":n)"] = act[4].." "..xnm.." "..par[4]
DSC["getMask("..xtp..":)"] = act[1].." "..xnm.." trace hit mask enums MASK"
DSC["setMask("..xtp..":n)"] = act[4].." "..xnm.." trace hit mask enums MASK"
DSC["getStart("..xtp..":)"] = act[1].." "..xnm.." trace start poisition sent to trace-line"
DSC["getStop("..xtp..":)"] = act[1].." "..xnm.." trace stop poisition sent to trace-line"
DSC["getCollisionGroup("..xtp..":)"] = act[1].." "..xnm.." trace collision group enums COLLISION_GROUP"
DSC["setCollisionGroup("..xtp..":n)"] = act[4].." "..xnm.." trace collision group enums COLLISION_GROUP"
DSC["isIgnoreWorld("..xtp..":)"] = act[1].." the "..xnm.." trace `IgnoreWorld` flag"
DSC["setIsIgnoreWorld("..xtp..":n)"] = act[4].." the "..xnm.." trace `IgnoreWorld` flag"
DSC["smpLocal("..xtp..":)"] = act[5].." the "..xnm.." and updates the trace-result according to "..par[1].." local axis"
DSC["smpLocal("..xtp..":e)"] = act[5].." the "..xnm.." and updates the trace-result according to argument entity"
DSC["smpLocal("..xtp..":va)"] = act[5].." the "..xnm.." and updates the trace-result according to argument position and angle"
DSC["smpWorld("..xtp..":)"] = act[5].." the "..xnm.." and updates the trace-result according to the world axis"
DSC["isHitNoDraw("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitNoDraw` flag"
DSC["isHitNonWorld("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitNonWorld` flag"
DSC["isHit("..xtp..":)"] = act[1].." the "..xnm.." trace-result `Hit` flag"
DSC["isHitSky("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitSky` flag"
DSC["isHitWorld("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitWorld` flag"
DSC["getHitBox("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitBox` number"
DSC["getMatType("..xtp..":)"] = act[1].." the "..xnm.." trace-result `MatType` material type number"
DSC["getHitGroup("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitGroup` group ID number"
DSC["getHitPos("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitPos` location vector"
DSC["getHitNormal("..xtp..":)"] = act[1].." "..xnm.." the trace-result surface `HitNormal` vector"
DSC["getNormal("..xtp..":)"] = act[1].." the "..xnm.." trace-result `Normal` aim vector"
DSC["getHitTexture("..xtp..":)"] = act[1].." the "..xnm.." trace-result `HitTexture` string"
DSC["getStartPos("..xtp..":)"] = act[1].." the "..xnm.." trace-result `StartPos` vector"
DSC["getSurfaceProps("..xtp..":)"] = act[1].." the "..xnm.." trace-result `SurfaceProps` ID type number"
DSC["getSurfacePropsName("..xtp..":)"] = act[1].." the "..xnm.." trace-result `SurfaceProps` ID type name string"
DSC["getPhysicsBone("..xtp..":)"] = act[1].." the "..xnm.." trace-result `PhysicsBone` ID number"
DSC["getFraction("..xtp..":)"] = act[1].." the "..xnm.." trace-result `Fraction` in the interval [0-1] number"
DSC["getFractionLength("..xtp..":)"] = act[1].." the "..xnm.." trace-result `Fraction` multiplied by its "..par[4].." number"
DSC["isStartSolid("..xtp..":)"] = act[1].." the "..xnm.." trace-result `StartSolid` flag"
DSC["isAllSolid("..xtp..":)"] = act[1].." the "..xnm.." trace-result `AllSolid` flag"
DSC["getFractionLeftSolid("..xtp..":)"] = act[1].." the "..xnm.." trace-result `FractionLeftSolid` in the interval [0-1] number"
DSC["getFractionLeftSolidLength("..xtp..":)"] = act[1].." the "..xnm.." trace-result `FractionLeftSolid` multiplied by its "..par[4].." number"
DSC["getEntity("..xtp..":)"] = act[1].." the "..xnm.." trace-result `Entity` entity"
DSC["dumpItem("..xtp..":n)"] = act[6].." the "..xnm.." to the chat area by number identifier"
DSC["dumpItem("..xtp..":s)"] = act[6].." the "..xnm.." to the chat area by string identifier"
DSC["dumpItem("..xtp..":sn)"] = act[6].." the "..xnm.." by number identifier in the specified area by first argument"
DSC["dumpItem("..xtp..":ss)"] = act[6].." the "..xnm.." by string identifier in the specified area by first argument"
