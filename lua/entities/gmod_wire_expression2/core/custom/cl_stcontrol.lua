--[[ ******************************************************************************
 My custom state LQ-PID control type handling process variables
****************************************************************************** ]]--

local SCD, par = E2Helper.Descriptions, {}
local trm = {"proportional", "integral", "derivative"}
local act = {"Returns", "Updates", "Removes", "Checks", "Resets", "Works", "Dumps"}
local dct = {"term", "automated", "control", "process", "state", "sampling", "signal", "value", "reference", "setpoint"}
local xsc = dct[5].." "..dct[3]
par[1] = {dct[6].." time", dct[3].." bias", dct[3].." type"}
par[2] = {trm[1].." "..dct[1].." gain" , trm[2].." "..dct[1].." gain" , trm[3].." "..dct[1].." gain"}
par[3] = {trm[1].." "..dct[1].." power", trm[2].." "..dct[1].." power", trm[3].." "..dct[1].." power"}
par[4] = {"windup lower bound", "windup upper bound"}
par[5] = {dct[4].." passed error", dct[4].." current error", dct[4].." error delta"}
par[6] = {dct[4].." passed time" , dct[4].." current time" , dct[4].." time delta", dct[4].." benchmark time", dct[4].." time ratio"}
SCD["noStControl()"] = act[1].." invalid "..xsc.." object"
SCD["newStControl()"] = act[1].." "..xsc.." object with dynamic "..par[1][1]
SCD["newStControl(n)"] = act[1].." "..xsc.." object with static "..par[1][1]
SCD["copyStControl(xsc:)"] = act[1].." "..xsc.." object copy instance"
SCD["setGainP(xsc:n)"] = act[2].." "..xsc.." "..par[2][1]
SCD["setGainI(xsc:n)"] = act[2].." "..xsc.." "..par[2][2]
SCD["setGainD(xsc:n)"] = act[2].." "..xsc.." "..par[2][3]
SCD["setGainPI(xsc:nn)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
SCD["setGainPI(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
SCD["setGainPI(xsc:r)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][2]
SCD["setGainPD(xsc:nn)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
SCD["setGainPD(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
SCD["setGainPD(xsc:r)"] = act[2].." "..xsc.." "..par[2][1].." and "..par[2][3]
SCD["setGainID(xsc:nn)"] = act[2].." "..xsc.." "..par[2][2].." and "..par[2][3]
SCD["setGainID(xsc:xv2)"] = act[2].." "..xsc.." "..par[2][3].." and "..par[2][3]
SCD["setGainID(xsc:r)"] = act[2].." "..xsc.." "..par[2][2].." and "..par[2][3]
SCD["setGain(xsc:nnn)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
SCD["setGain(xsc:v)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
SCD["setGain(xsc:r)"] = act[2].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
SCD["remGainP(xsc:)"] = act[3].." "..xsc.." "..par[2][1]
SCD["remGainI(xsc:)"] = act[3].." "..xsc.." "..par[2][2]
SCD["remGainD(xsc:)"] = act[3].." "..xsc.." "..par[2][3]
SCD["remGainPI(xsc:)"] = act[3].." "..xsc.." "..par[2][1].." and "..par[2][2]
SCD["remGainPD(xsc:)"] = act[3].." "..xsc.." "..par[2][1].." and "..par[2][3]
SCD["remGainID(xsc:)"] = act[3].." "..xsc.." "..par[2][2].." and "..par[2][3]
SCD["remGain(xsc:)"] = act[3].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
SCD["getGain(xsc:)"] = act[1].." "..xsc.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
SCD["getGainPI(xsc:)"] = act[1].." "..xsc.." "..par[2][1].." and "..par[2][2]
SCD["getGainPD(xsc:)"] = act[1].." "..xsc.." "..par[2][1].." and "..par[2][3]
SCD["getGainID(xsc:)"] = act[1].." "..xsc.." "..par[2][2].." and "..par[2][3]
SCD["getGainP(xsc:)"] = act[1].." "..xsc.." "..par[2][1]
SCD["getGainI(xsc:)"] = act[1].." "..xsc.." "..par[2][2]
SCD["getGainD(xsc:)"] = act[1].." "..xsc.." "..par[2][3]
SCD["setBias(xsc:n)"] = act[2].." "..xsc.." "..par[1][2]
SCD["getBias(xsc:)"] = act[1].." "..xsc.." "..par[1][2]
SCD["getType(xsc:)"] = act[1].." "..xsc.." "..par[1][3]
SCD["setWindup(xsc:nn)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
SCD["setWindup(xsc:r)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
SCD["setWindup(xsc:xv2)"] = act[2].." "..xsc.." "..par[4][1].." and "..par[4][2]
SCD["setWindupD(xsc:n)"] = act[2].." "..xsc.." "..par[4][1]
SCD["setWindupU(xsc:n)"] = act[2].." "..xsc.." "..par[4][2]
SCD["remWindup(xsc:)"] = act[3].." "..xsc.." "..par[4][1].." and "..par[4][2]
SCD["remWindupD(xsc:)"] = act[3].." "..xsc.." "..par[4][1]
SCD["remWindupU(xsc:)"] = act[3].." "..xsc.." "..par[4][2]
SCD["getWindup(xsc:)"] = act[1].." "..xsc.." "..par[4][1].." and "..par[4][2]
SCD["getWindupD(xsc:)"] = act[1].." "..xsc.." "..par[4][1]
SCD["getWindupU(xsc:)"] = act[1].." "..xsc.." "..par[4][2]
SCD["setPowerP(xsc:n)"] = act[2].." "..xsc.." "..par[3][1]
SCD["setPowerI(xsc:n)"] = act[2].." "..xsc.." "..par[3][2]
SCD["setPowerD(xsc:n)"] = act[2].." "..xsc.." "..par[3][3]
SCD["setPowerPI(xsc:nn)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
SCD["setPowerPI(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
SCD["setPowerPI(xsc:r)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][2]
SCD["setPowerPD(xsc:nn)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
SCD["setPowerPD(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
SCD["setPowerPD(xsc:r)"] = act[2].." "..xsc.." "..par[3][1].." and "..par[3][3]
SCD["setPowerID(xsc:nn)"] = act[2].." "..xsc.." "..par[3][2].." and "..par[3][3]
SCD["setPowerID(xsc:xv2)"] = act[2].." "..xsc.." "..par[3][3].." and "..par[3][3]
SCD["setPowerID(xsc:r)"] = act[2].." "..xsc.." "..par[3][2].." and "..par[3][3]
SCD["setPower(xsc:nnn)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
SCD["setPower(xsc:v)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
SCD["setPower(xsc:r)"] = act[2].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
SCD["getPower(xsc:)"] = act[1].." "..xsc.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
SCD["getPowerPI(xsc:)"] = act[1].." "..xsc.." "..par[3][1].." and "..par[3][2]
SCD["getPowerPD(xsc:)"] = act[1].." "..xsc.." "..par[3][1].." and "..par[3][3]
SCD["getPowerID(xsc:)"] = act[1].." "..xsc.." "..par[3][2].." and "..par[3][3]
SCD["getPowerP(xsc:)"] = act[1].." "..xsc.." "..par[3][1]
SCD["getPowerI(xsc:)"] = act[1].." "..xsc.." "..par[3][2]
SCD["getPowerD(xsc:)"] = act[1].." "..xsc.." "..par[3][3]
SCD["getErrorNow(xsc:)"] = act[1].." "..xsc.." "..par[5][2]
SCD["getErrorOld(xsc:)"] = act[1].." "..xsc.." "..par[5][1]
SCD["getErrorDelta(xsc:)"] = act[1].." "..xsc.." "..par[5][3]
SCD["getTimeNow(xsc:)"] = act[1].." "..xsc.." "..par[6][2]
SCD["getTimeOld(xsc:)"] = act[1].." "..xsc.." "..par[6][1]
SCD["getTimeDelta(xsc:)"] = act[1].." "..xsc.." dymamic "..par[6][3]
SCD["getTimeSample(xsc:)"] = act[1].." "..xsc.." static "..par[6][3]
SCD["setTimeSample(xsc:)"] = act[2].." "..xsc.." static "..par[6][3]
SCD["remTimeSample(xsc:)"] = act[3].." "..xsc.." static "..par[6][3]
SCD["getTimeBench(xsc:)"] = act[1].." "..xsc.." "..par[6][4]
SCD["getTimeRatio(xsc:)"] = act[1].." "..xsc.." "..par[6][5]
SCD["setIsIntegrating(xsc:n)"] = act[2].." "..trm[2].." enabled flag"
SCD["isIntegrating(xsc:)"] = act[4].." "..trm[2].." enabled flag"
SCD["setIsCombined(xsc:n)"] = act[2].." combined flag spreading "..par[2][1].." across others"
SCD["isCombined(xsc:)"] = act[4].." "..xsc.." combined flag spreading "..par[2][1].." across others"
SCD["setIsManual(xsc:n)"] = act[2].." "..xsc.." manual "..dct[3].." flag"
SCD["isManual(xsc:)"] = act[4].." "..xsc.." manual "..dct[3].." flag"
SCD["setIsManual(xsc:n)"] = act[2].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
SCD["getManual(xsc:)"] = act[1].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
SCD["setIsInverted(xsc:n)"] = act[2].." "..xsc.." inverted feedback flag of the "..dct[9].." and "..dct[10]
SCD["isInverted(xsc:)"] = act[4].." "..xsc.." inverted feedback flag of the "..dct[9].." and "..dct[10]
SCD["setIsActive(xsc:n)"] = act[2].." "..xsc.." activated working flag"
SCD["isActive(xsc:)"] = act[4].." "..xsc.." activated working flag"
SCD["getControl(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[7].." "..dct[7]
SCD["getControlTerm(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
SCD["getControlTerm(xsc:)"] = act[1].." "..xsc.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
SCD["getManual(xsc:)"] = act[1].." "..xsc.." manual "..dct[3].." "..dct[7].." value"
SCD["getControlTermP(xsc:)"] = act[1].." "..xsc.." "..trm[1].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
SCD["getControlTermI(xsc:)"] = act[1].." "..xsc.." "..trm[2].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
SCD["getControlTermD(xsc:)"] = act[1].." "..xsc.." "..trm[3].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
SCD["resState(xsc:)"] = act[5].." "..xsc.." "..dct[2].." internal parameters"
SCD["setState(xsc:nn)"] = act[6].." "..xsc.." "..dct[2].." internal parameters"
SCD["dumpConsole(xsc:s)"] = act[7].." "..xsc.." internal parameters into the console"
