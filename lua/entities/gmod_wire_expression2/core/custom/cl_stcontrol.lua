--[[ ******************************************************************************
 My custom state LQ-PID control type handling process variables
****************************************************************************** ]]--

local DSC, par = E2Helper.Descriptions, {}
local trm = {"proportional", "integral", "derivative"}
local act = {"Returns", "Updates", "Removes", "Checks", "Resets", "Works", "Dumps", "Tunes"}
local dct = {"term", "automated", "control", "process", "state", "sampling", "signal", "value", "reference", "setpoint", "method"}
local xtp, xnm = "xsc", (dct[5].." "..dct[3])
par[1] = {dct[6].." time", dct[3].." bias", dct[3].." type"}
par[2] = {trm[1].." "..dct[1].." gain" , trm[2].." "..dct[1].." gain" , trm[3].." "..dct[1].." gain"}
par[3] = {trm[1].." "..dct[1].." power", trm[2].." "..dct[1].." power", trm[3].." "..dct[1].." power"}
par[4] = {"windup lower bound", "windup upper bound"}
par[5] = {dct[4].." passed error", dct[4].." current error", dct[4].." error delta"}
par[6] = {dct[4].." passed time" , dct[4].." current time" , dct[4].." time delta", dct[4].." benchmark time", dct[4].." time ratio"}
DSC["noStControl()"] = act[1].." invalid "..xnm.." object"
DSC["newStControl()"] = act[1].." "..xnm.." object with dynamic "..par[1][1]
DSC["newStControl(n)"] = act[1].." "..xnm.." object with static "..par[1][1]
DSC["sumStControls()"] = act[1].." the used "..xnm.." count"
DSC["maxStControls()"] = act[1].." the upper "..xnm.." count"
DSC["remSelf("..xtp..":)"] = act[3].." the "..xnm.." from the list"
DSC["getCopy("..xtp..":)"] = act[1].." "..xnm.." object copy instance"
DSC["setGainP("..xtp..":n)"] = act[2].." "..xnm.." "..par[2][1]
DSC["setGainI("..xtp..":n)"] = act[2].." "..xnm.." "..par[2][2]
DSC["setGainD("..xtp..":n)"] = act[2].." "..xnm.." "..par[2][3]
DSC["setGainPI("..xtp..":nn)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][2]
DSC["setGainPI("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][2]
DSC["setGainPI("..xtp..":r)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][2]
DSC["setGainPD("..xtp..":nn)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][3]
DSC["setGainPD("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][3]
DSC["setGainPD("..xtp..":r)"] = act[2].." "..xnm.." "..par[2][1].." and "..par[2][3]
DSC["setGainID("..xtp..":nn)"] = act[2].." "..xnm.." "..par[2][2].." and "..par[2][3]
DSC["setGainID("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[2][3].." and "..par[2][3]
DSC["setGainID("..xtp..":r)"] = act[2].." "..xnm.." "..par[2][2].." and "..par[2][3]
DSC["setGain("..xtp..":nnn)"] = act[2].." "..xnm.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["setGain("..xtp..":v)"] = act[2].." "..xnm.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["setGain("..xtp..":r)"] = act[2].." "..xnm.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["remGainP("..xtp..":)"] = act[3].." "..xnm.." "..par[2][1]
DSC["remGainI("..xtp..":)"] = act[3].." "..xnm.." "..par[2][2]
DSC["remGainD("..xtp..":)"] = act[3].." "..xnm.." "..par[2][3]
DSC["remGainPI("..xtp..":)"] = act[3].." "..xnm.." "..par[2][1].." and "..par[2][2]
DSC["remGainPD("..xtp..":)"] = act[3].." "..xnm.." "..par[2][1].." and "..par[2][3]
DSC["remGainID("..xtp..":)"] = act[3].." "..xnm.." "..par[2][2].." and "..par[2][3]
DSC["remGain("..xtp..":)"] = act[3].." "..xnm.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["getGain("..xtp..":)"] = act[1].." "..xnm.." "..par[2][1]..", "..par[2][2].." and "..par[2][3]
DSC["getGainPI("..xtp..":)"] = act[1].." "..xnm.." "..par[2][1].." and "..par[2][2]
DSC["getGainPD("..xtp..":)"] = act[1].." "..xnm.." "..par[2][1].." and "..par[2][3]
DSC["getGainID("..xtp..":)"] = act[1].." "..xnm.." "..par[2][2].." and "..par[2][3]
DSC["getGainP("..xtp..":)"] = act[1].." "..xnm.." "..par[2][1]
DSC["getGainI("..xtp..":)"] = act[1].." "..xnm.." "..par[2][2]
DSC["getGainD("..xtp..":)"] = act[1].." "..xnm.." "..par[2][3]
DSC["setBias("..xtp..":n)"] = act[2].." "..xnm.." "..par[1][2]
DSC["getBias("..xtp..":)"] = act[1].." "..xnm.." "..par[1][2]
DSC["getType("..xtp..":)"] = act[1].." "..xnm.." "..par[1][3]
DSC["setWindup("..xtp..":nn)"] = act[2].." "..xnm.." "..par[4][1].." and "..par[4][2]
DSC["setWindup("..xtp..":r)"] = act[2].." "..xnm.." "..par[4][1].." and "..par[4][2]
DSC["setWindup("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[4][1].." and "..par[4][2]
DSC["setWindupD("..xtp..":n)"] = act[2].." "..xnm.." "..par[4][1]
DSC["setWindupU("..xtp..":n)"] = act[2].." "..xnm.." "..par[4][2]
DSC["remWindup("..xtp..":)"] = act[3].." "..xnm.." "..par[4][1].." and "..par[4][2]
DSC["remWindupD("..xtp..":)"] = act[3].." "..xnm.." "..par[4][1]
DSC["remWindupU("..xtp..":)"] = act[3].." "..xnm.." "..par[4][2]
DSC["getWindup("..xtp..":)"] = act[1].." "..xnm.." "..par[4][1].." and "..par[4][2]
DSC["getWindupD("..xtp..":)"] = act[1].." "..xnm.." "..par[4][1]
DSC["getWindupU("..xtp..":)"] = act[1].." "..xnm.." "..par[4][2]
DSC["setPowerP("..xtp..":n)"] = act[2].." "..xnm.." "..par[3][1]
DSC["setPowerI("..xtp..":n)"] = act[2].." "..xnm.." "..par[3][2]
DSC["setPowerD("..xtp..":n)"] = act[2].." "..xnm.." "..par[3][3]
DSC["setPowerPI("..xtp..":nn)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPI("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPI("..xtp..":r)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][2]
DSC["setPowerPD("..xtp..":nn)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][3]
DSC["setPowerPD("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][3]
DSC["setPowerPD("..xtp..":r)"] = act[2].." "..xnm.." "..par[3][1].." and "..par[3][3]
DSC["setPowerID("..xtp..":nn)"] = act[2].." "..xnm.." "..par[3][2].." and "..par[3][3]
DSC["setPowerID("..xtp..":xv2)"] = act[2].." "..xnm.." "..par[3][3].." and "..par[3][3]
DSC["setPowerID("..xtp..":r)"] = act[2].." "..xnm.." "..par[3][2].." and "..par[3][3]
DSC["setPower("..xtp..":nnn)"] = act[2].." "..xnm.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["setPower("..xtp..":v)"] = act[2].." "..xnm.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["setPower("..xtp..":r)"] = act[2].." "..xnm.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["getPower("..xtp..":)"] = act[1].." "..xnm.." "..par[3][1]..", "..par[3][2].." and "..par[3][3]
DSC["getPowerPI("..xtp..":)"] = act[1].." "..xnm.." "..par[3][1].." and "..par[3][2]
DSC["getPowerPD("..xtp..":)"] = act[1].." "..xnm.." "..par[3][1].." and "..par[3][3]
DSC["getPowerID("..xtp..":)"] = act[1].." "..xnm.." "..par[3][2].." and "..par[3][3]
DSC["getPowerP("..xtp..":)"] = act[1].." "..xnm.." "..par[3][1]
DSC["getPowerI("..xtp..":)"] = act[1].." "..xnm.." "..par[3][2]
DSC["getPowerD("..xtp..":)"] = act[1].." "..xnm.." "..par[3][3]
DSC["getErrorNow("..xtp..":)"] = act[1].." "..xnm.." "..par[5][2]
DSC["getErrorOld("..xtp..":)"] = act[1].." "..xnm.." "..par[5][1]
DSC["getErrorDelta("..xtp..":)"] = act[1].." "..xnm.." "..par[5][3]
DSC["getTimeNow("..xtp..":)"] = act[1].." "..xnm.." "..par[6][2]
DSC["getTimeOld("..xtp..":)"] = act[1].." "..xnm.." "..par[6][1]
DSC["getTimeDelta("..xtp..":)"] = act[1].." "..xnm.." dymamic "..par[6][3]
DSC["getTimeSample("..xtp..":)"] = act[1].." "..xnm.." static "..par[6][3]
DSC["setTimeSample("..xtp..":n)"] = act[2].." "..xnm.." static "..par[6][3]
DSC["remTimeSample("..xtp..":)"] = act[3].." "..xnm.." static "..par[6][3]
DSC["getTimeBench("..xtp..":)"] = act[1].." "..xnm.." "..par[6][4]
DSC["getTimeRatio("..xtp..":)"] = act[1].." "..xnm.." "..par[6][5]
DSC["setIsIntegrating("..xtp..":n)"] = act[2].." "..trm[2].." enabled flag"
DSC["isIntegrating("..xtp..":)"] = act[4].." "..trm[2].." enabled flag"
DSC["setIsCombined("..xtp..":n)"] = act[2].." combined flag spreading "..par[2][1].." across others"
DSC["isCombined("..xtp..":)"] = act[4].." "..xnm.." combined flag spreading "..par[2][1].." across others"
DSC["setIsManual("..xtp..":n)"] = act[2].." "..xnm.." manual "..dct[3].." flag"
DSC["isManual("..xtp..":)"] = act[4].." "..xnm.." manual "..dct[3].." flag"
DSC["setManual("..xtp..":n)"] = act[2].." "..xnm.." manual "..dct[3].." "..dct[8]
DSC["setIsManual("..xtp..":n)"] = act[2].." "..xnm.." manual "..dct[3].." "..dct[7].." value"
DSC["getManual("..xtp..":)"] = act[1].." "..xnm.." manual "..dct[3].." "..dct[7].." value"
DSC["setIsInverted("..xtp..":n)"] = act[2].." "..xnm.." inverted feedback flag of the "..dct[9].." and "..dct[10]
DSC["isInverted("..xtp..":)"] = act[4].." "..xnm.." inverted feedback flag of the "..dct[9].." and "..dct[10]
DSC["setIsActive("..xtp..":n)"] = act[2].." "..xnm.." activated working flag"
DSC["isActive("..xtp..":)"] = act[4].." "..xnm.." activated working flag"
DSC["getControl("..xtp..":)"] = act[1].." "..xnm.." "..dct[2].." "..dct[3].." "..dct[7].." "..dct[7]
DSC["getControlTerm("..xtp..":)"] = act[1].." "..xnm.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTerm("..xtp..":)"] = act[1].." "..xnm.." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getManual("..xtp..":)"] = act[1].." "..xnm.." manual "..dct[3].." "..dct[7].." value"
DSC["getControlTermP("..xtp..":)"] = act[1].." "..xnm.." "..trm[1].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTermI("..xtp..":)"] = act[1].." "..xnm.." "..trm[2].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["getControlTermD("..xtp..":)"] = act[1].." "..xnm.." "..trm[3].." "..dct[2].." "..dct[3].." "..dct[1].." "..dct[7]
DSC["resState("..xtp..":)"] = act[5].." "..xnm.." "..dct[2].." internal parameters"
DSC["setState("..xtp..":nn)"] = act[6].." "..xnm.." "..dct[2].." internal parameters"
DSC["tuneAH("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Astrom-Hagglund method (AH)"
DSC["tuneAutoZN("..xtp..":nn)"] = act[8].." the "..xnm.." using the Ziegler-Nichols auto-oscilation method (ZN)"
DSC["tuneAutoZN("..xtp..":nns)"] = act[8].." the "..xnm.." using the Ziegler-Nichols auto-oscilation method with overshot option (ZN)"
DSC["tuneIAE("..xtp..":nnn)"] = act[8].." the "..xnm.." using the integral absolute error method (IAE)"
DSC["tuneISE("..xtp..":nnn)"] = act[8].." the "..xnm.." using the integral square error method (ISE)"
DSC["tuneITAE("..xtp..":nnn)"] = act[8].." the "..xnm.." using the integral of time-weighted absolute error method (ITAE)"
DSC["tuneOverCHRLR("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Chien-Hrones-Reswick method (CHR) load rejection 20% overshot"
DSC["tuneOverCHRSP("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Chien-Hrones-Reswick method (CHR) set point track 20% overshot"
DSC["tuneProcCC("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Choen-Coon method (CC)"
DSC["tuneProcCHRLR("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Chien-Hrones-Reswick method (CHR) load rejection"
DSC["tuneProcCHRSP("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Chien-Hrones-Reswick method (CHR) set point track"
DSC["tuneProcZN("..xtp..":nnn)"] = act[8].." the "..xnm.." using the Ziegler-Nichols plant process method (ZN)"
DSC["dumpItem("..xtp..":n)"] = act[7].." "..xnm.." to the chat area by number identifier"
DSC["dumpItem("..xtp..":s)"] = act[7].." "..xnm.." to the chat area by string identifier"
DSC["dumpItem("..xtp..":sn)"] = act[7].." "..xnm.." by number identifier in the specified area by first argument"
DSC["dumpItem("..xtp..":ss)"] = act[7].." "..xnm.." by string identifier in the specified area by first argument"
