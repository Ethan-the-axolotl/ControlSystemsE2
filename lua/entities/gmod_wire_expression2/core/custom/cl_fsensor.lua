--[[ ******************************************************************************
 My custom flash sensor tracer type ( Based on wire rangers )
****************************************************************************** ]]--

local FSD = E2Helper.Descriptions
local xfs, par = "flash sensor", {"attachment entity", "origin position", "direction vector", "length distance"}
FSD["noFSensor()"] = "Returns invalid "..xfs.." object"
FSD["setFSensor(e:vvn)"] = "Returns "..xfs.." local to the entity by "..par[2]..", "..par[3]..", "..par[4]
FSD["newFSensor(vvn)"] = "Returns "..xfs.." relative to the world by "..par[2]..", "..par[3]..", "..par[4]
FSD["newFSensor(e:vv)"] = "Returns "..xfs.." local to the entity by "..par[2]..", "..par[3]..", zero "..par[4]
FSD["newFSensor(vv)"] = "Returns "..xfs.." relative to the world by "..par[2]..", "..par[3]..", zero "..par[4]
FSD["newFSensor(e:v)"] = "Returns "..xfs.." local to the entity by "..par[2]..", zero "..par[3]..", zero "..par[4]
FSD["newFSensor(v)"] = "Returns "..xfs.." relative to the world by "..par[2]..", zero "..par[3]..", zero "..par[4]
FSD["newFSensor(e:)"] = "Returns "..xfs.." local to the entity by zero "..par[2]..", zero "..par[3]..", zero "..par[4]
FSD["newFSensor(v)"] = "Returns "..xfs.." relative to the world by zero "..par[2]..", zero "..par[3]..", zero "..par[4]
FSD["copyFSensor(xfs:)"] = "Returns "..xfs.." copy instance of the current object"
FSD["addEntityHitSkip(xfs:e)"] = "Adds the entity to the "..xfs.." internal ignore hit list"
FSD["remEntityHitSkip(xfs:e)"] = "Removes the entity from the "..xfs.." internal ignore hit list"
FSD["addEntityHitOnly(xfs:e)"] = "Adds the entity to the "..xfs.." internal only hit list"
FSD["remEntityHitOnly(xfs:e)"] = "Removes the entity from the "..xfs.." internal only hit list"
FSD["remHit(xfs:s)"] = "Removes the option from the "..xfs.." internal hit preferences"
FSD["addHitSkip(xfs:sn)"] = "Adds the option to the "..xfs.." internal ignore hit list"
FSD["remHitSkip(xfs:sn)"] = "Removes the option from the "..xfs.." internal ignore hit list"
FSD["addHitOnly(xfs:sn)"] = "Adds the option to the "..xfs.." internal hit only list"
FSD["remHitOnly(xfs:sn)"] = "Removes the option from the "..xfs.." internal only hit list"
FSD["addHitSkip(xfs:ss)"] = "Adds the option to the "..xfs.." internal ignore hit list"
FSD["remHitSkip(xfs:ss)"] = "Removes the option from the "..xfs.." internal ignore hit list"
FSD["addHitOnly(xfs:ss)"] = "Adds the option to the "..xfs.." internal hit only list"
FSD["remHitOnly(xfs:ss)"] = "Removes the option from the "..xfs.." internal only hit list"
FSD["getAttachEntity(xfs:)"] = "Returns the attachment entity of the "..xfs
FSD["setAttachEntity(xfs:e)"] = "Updates the attachment entity of the "..xfs
FSD["getIgnoreWorld(xfs:)"] = "Returns the ignore world flag of the "..xfs
FSD["setAttachEntity(xfs:n)"] = "Updates the ignore world flag of the "..xfs
FSD["getOrigin(xfs:)"] = "Returns "..xfs.." "..par[2]
FSD["getOriginLocal(xfs:)"] = "Returns "..xfs.." world "..par[2].." converted to "..par[1].." local axis"
FSD["getOriginLocal(xfs:e)"] = "Returns "..xfs.." world "..par[2].." converted to entity local axis"
FSD["getOriginLocal(xfs:va)"] = "Returns "..xfs.." world "..par[2].." converted to position/angle local axis"
FSD["getOriginWorld(xfs:)"] = "Returns "..xfs.." local "..par[2].." converted to "..par[1].." world axis"
FSD["getOriginWorld(xfs:e)"] = "Returns "..xfs.." local "..par[2].." converted to entity world axis"
FSD["getOriginWorld(xfs:va)"] = "Returns "..xfs.." local "..par[2].." converted to position/angle world axis"
FSD["setOrigin(xfs:v)"] = "Updates the "..xfs.." "..par[2]
FSD["getDirection(xfs:)"] = "Returns "..xfs.." "..par[3]
FSD["getDirectionLocal(xfs:)"] = "Returns "..xfs.." world "..par[3].." converted to "..par[1].." local axis"
FSD["getDirectionLocal(xfs:e)"] = "Returns "..xfs.." world "..par[3].." converted to entity local axis"
FSD["getDirectionLocal(xfs:a)"] = "Returns "..xfs.." world "..par[3].." converted to angle local axis"
FSD["getDirectionWorld(xfs:)"] = "Returns "..xfs.." local "..par[3].." converted to "..par[1].." world axis"
FSD["getDirectionWorld(xfs:e)"] = "Returns "..xfs.." local "..par[3].." converted to entity world axis"
FSD["getDirectionWorld(xfs:a)"] = "Returns "..xfs.." local "..par[3].." converted to angle world axis"
FSD["setDirection(xfs:v)"] = "Updates the "..xfs.." "..par[3]
FSD["getLength(xfs:)"] = "Returns "..xfs.." "..par[4]
FSD["setLength(xfs:n)"] = "Updates "..xfs.." "..par[4]
FSD["getMask(xfs:)"] = "Returns "..xfs.." trace hit mask enum MASK_%"
FSD["setMask(xfs:n)"] = "Updates "..xfs.." trace hit mask enum MASK_%"
FSD["getCollisionGroup(xfs:)"] = "Returns "..xfs.." trace collision group enum COLLISION_GROUP_%"
FSD["setCollisionGroup(xfs:n)"] = "Updates "..xfs.." trace collision group enum COLLISION_GROUP_%"
FSD["smpLocal(xfs:)"] = "Samples the "..xfs.." and updates the trace result according to "..par[1].." local axis"
FSD["smpWorld(xfs:)"] = "Samples the "..xfs.." and updates the trace result according to the world axis"
FSD["isHitNoDraw(xfs:)"] = "Returns the "..xfs.." sampled trace /HitNoDraw/ flag"
FSD["isHitNonWorld(xfs:)"] = "Returns the "..xfs.." sampled trace /HitNonWorld/ flag"
FSD["isHit(xfs:)"] = "Returns the "..xfs.." sampled trace /Hit/ flag"
FSD["isHitSky(xfs:)"] = "Returns the "..xfs.." sampled trace /HitSky/ flag"
FSD["isHitWorld(xfs:)"] = "Returns the "..xfs.." sampled trace /HitWorld/ flag"
FSD["getHitBox(xfs:)"] = "Returns the "..xfs.." sampled trace /HitBox/ number"
FSD["getMatType(xfs:)"] = "Returns the "..xfs.." sampled trace /MatType/ material type number"
FSD["getHitGroup(xfs:)"] = "Returns the "..xfs.." sampled trace /HitGroup/ group ID number"
FSD["getHitPos(xfs:)"] = "Returns the "..xfs.." sampled trace /HitPos/ location vector"
FSD["getHitNormal(xfs:)"] = "Returns "..xfs.." the sampled trace surface /HitNormal/ vector"
FSD["getNormal(xfs:)"] = "Returns the "..xfs.." sampled trace /Normal/ aim vector"
FSD["getHitTexture(xfs:)"] = "Returns the "..xfs.." sampled trace /HitTexture/ string"
FSD["getStartPos(xfs:)"] = "Returns the "..xfs.." sampled trace /StartPos/ vector"
FSD["getSurfaceProps(xfs:)"] = "Returns the "..xfs.." sampled trace /SurfaceProps/ ID type number"
FSD["getSurfacePropsName(xfs:)"] = "Returns the "..xfs.." sampled trace /SurfaceProps/ ID type name string"
FSD["getPhysicsBone(xfs:)"] = "Returns the "..xfs.." sampled trace /PhysicsBone/ ID number"
FSD["getFraction(xfs:)"] = "Returns the "..xfs.." sampled trace /Fraction/ in the interval [0-1] number"
FSD["getFractionLength(xfs:)"] = "Returns the "..xfs.." sampled trace /Fraction/ multiplied by its "..par[4].." number"
FSD["isStartSolid(xfs:)"] = "Returns the "..xfs.." sampled trace /StartSolid/ flag"
FSD["isAllSolid(xfs:)"] = "Returns the "..xfs.." sampled trace /AllSolid/ flag"
FSD["getFractionLeftSolid(xfs:)"] = "Returns the "..xfs.." sampled trace /FractionLeftSolid/ in the interval [0-1] number"
FSD["getFractionLeftSolidLength(xfs:)"] = "Returns the "..xfs.." sampled trace /FractionLeftSolid/ multiplied by its "..par[4].." number"
FSD["getEntity(xfs:)"] = "Returns the "..xfs.." sampled trace /Entity/ entity"
